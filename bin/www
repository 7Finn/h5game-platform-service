#!/usr/bin/env node

/**
 * Module dependencies.
 */

let debug = require('debug')('platform-service:server');
let http = require('http');
let mongo = require('mongodb').MongoClient;

const mongourl = 'mongodb://localhost:27017/h5game';

mongo.connect(mongourl, (err, client) => {
  const db = client.db("h5game");
  console.log('Connect mongodb success !');

  let app = require('../app');
  /**
   * Create HTTP server.
   */

  let server = http.createServer(app);
  let io = require('socket.io')(server);
  let connectSocket = require('../socket/connect');
  let gameSocket = require('../socket/game');
  let iframeSocket = require('../socket/iframe');
  /**
   * Get port from environment and store in Express.
   */

  let port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  connectSocket(io, db);
  gameSocket(io, db);
  iframeSocket(io, db);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);


  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    let bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
})
